name: CI/CD Pipeline

# Trigger conditions for this workflow
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job for code quality and testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      # Check out the repository code
      - uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies for faster builds
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install system dependencies (FFmpeg)
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-asyncio pytest-cov

      # Run linting
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Run tests with coverage
      - name: Test with pytest
        run: |
          pytest tests/ --cov=./ --cov-report=xml
        continue-on-error: true # Don't fail if tests don't exist yet

      # Upload coverage reports (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true # Don't fail the build on vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Docker build job
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test] # Only run after tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false # Don't push to registry in this example
          tags: discord-music-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Documentation job
  docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check markdown files
        uses: DavidAnson/markdownlint-cli2-action@v11
        with:
          globs: "**/*.md"
        continue-on-error: true
